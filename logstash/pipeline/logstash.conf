input {
  # Collect logs from Node.js application
  tcp {
    port => 5000
    type => "nodejs"
    codec => json
  }

  # Collect logs from MongoDB
  file {
    path => "/var/log/mongodb/*.log"
    type => "mongodb"
    start_position => "beginning"
  }

  # Collect logs from Redis
  file {
    path => "/var/log/redis/*.log"
    type => "redis"
    start_position => "beginning"
  }

  # Collect logs from Nginx
  file {
    path => "/var/log/nginx/access.log"
    type => "nginx-access"
    start_position => "beginning"
  }
  file {
    path => "/var/log/nginx/error.log"
    type => "nginx-error"
    start_position => "beginning"
  }

  # Collect Docker container logs
  beats {
    port => 5044
    type => "docker"
  }
}

filter {
  # Parse Node.js logs
  if [type] == "nodejs" {
    json {
      source => "message"
    }
    date {
      match => [ "timestamp", "ISO8601" ]
    }
  }

  # Parse Nginx access logs
  if [type] == "nginx-access" {
    grok {
      match => { "message" => "%{COMBINEDAPACHELOG}" }
    }
    date {
      match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
    }
    geoip {
      source => "clientip"
    }
    useragent {
      source => "agent"
      target => "user_agent"
    }
  }

  # Parse Nginx error logs
  if [type] == "nginx-error" {
    grok {
      match => { "message" => "(?<timestamp>%{YEAR}[./-]%{MONTHNUM}[./-]%{MONTHDAY}[- ]%{TIME}) \[%{LOGLEVEL:severity}\] %{POSINT:pid}#%{NUMBER}: %{GREEDYDATA:errormessage}" }
    }
    date {
      match => [ "timestamp", "yyyy/MM/dd HH:mm:ss" ]
    }
  }

  # Parse MongoDB logs
  if [type] == "mongodb" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:severity} %{GREEDYDATA:message}" }
    }
    date {
      match => [ "timestamp", "ISO8601" ]
    }
  }

  # Parse Redis logs
  if [type] == "redis" {
    grok {
      match => { "message" => "%{REDISTIMESTAMP:timestamp} %{GREEDYDATA:message}" }
    }
    date {
      match => [ "timestamp", "dd MMM HH:mm:ss.SSS" ]
    }
  }

  # Add common fields
  mutate {
    add_field => {
      "environment" => "${ENVIRONMENT:production}"
      "application" => "mazufa-records"
    }
  }

  # Drop unnecessary fields
  mutate {
    remove_field => [ "path", "host", "@version", "message" ]
  }
}

output {
  # Send all logs to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "mazufa-logs-%{+YYYY.MM.dd}"
    template_name => "mazufa-logs"
    template_overwrite => true
  }

  # Send error logs to a separate index
  if [severity] == "ERROR" or [loglevel] == "ERROR" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "mazufa-errors-%{+YYYY.MM.dd}"
    }
  }

  # Send security-related logs to a separate index
  if [type] in ["auth", "security"] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "mazufa-security-%{+YYYY.MM.dd}"
    }
  }

  # Send performance metrics to a separate index
  if [type] == "performance" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "mazufa-performance-%{+YYYY.MM.dd}"
    }
  }

  # Optional: Send critical errors to email
  if [severity] == "CRITICAL" {
    email {
      to => "alerts@mazufarecords.com"
      from => "monitoring@mazufarecords.com"
      subject => "Critical Error in Mazufa Records Application"
      body => "Error: %{message}"
      via => "smtp"
      options => {
        "host" => "smtp.gmail.com"
        "port" => 587
        "username" => "${SMTP_USERNAME}"
        "password" => "${SMTP_PASSWORD}"
      }
    }
  }

  # Optional: Send logs to S3 for long-term storage
  # if [type] == "audit" {
  #   s3 {
  #     access_key_id => "${AWS_ACCESS_KEY_ID}"
  #     secret_access_key => "${AWS_SECRET_ACCESS_KEY}"
  #     region => "us-east-1"
  #     bucket => "mazufa-logs"
  #     prefix => "audit-logs/%{+YYYY}/%{+MM}/%{+dd}"
  #     rotation_strategy => "size_and_time"
  #     size_file => 5242880
  #     time_file => 1
  #     codec => json
  #   }
  # }

  # Debug output (disabled in production)
  if "${ENVIRONMENT}" == "development" {
    stdout {
      codec => rubydebug
    }
  }
}
